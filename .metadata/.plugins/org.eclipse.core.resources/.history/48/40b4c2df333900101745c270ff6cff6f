package com.cts.inventorymanagement.supplier.controller;

import com.cts.inventorymanagement.supplier.model.PurchaseOrderDto;
import com.cts.inventorymanagement.supplier.model.SupplierDetailsResponse;
import com.cts.inventorymanagement.supplier.model.SupplierRequest;
import com.cts.inventorymanagement.supplier.model.SupplierResponse;
import com.cts.inventorymanagement.supplier.service.SupplierService;
import jakarta.validation.Valid;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping
public class SupplierController {

    private final SupplierService supplierService;

    public SupplierController(SupplierService supplierService) {
        this.supplierService = supplierService;
    }

    @GetMapping
    public ResponseEntity<List<SupplierResponse>> getAllSuppliers(){
        return new ResponseEntity<List<SupplierResponse>>(supplierService.getAllSuppliers(),HttpStatus.OK);
    }
    
    @PostMapping
    public ResponseEntity<SupplierResponse> createSupplier(
            @Valid @RequestBody SupplierRequest request) {
        
        SupplierResponse createdSupplier = supplierService.createSupplier(request);
        
        URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(createdSupplier.getId())
                .toUri();
        
        return ResponseEntity.created(location).body(createdSupplier);
    }

    @GetMapping("/{id}")
    public ResponseEntity<SupplierDetailsResponse> getSupplierDetails(
            @PathVariable Long id) {
        
        return ResponseEntity.ok(supplierService.getSupplierDetails(id));
    }

    @GetMapping("/{id}/orders")
    public ResponseEntity<List<PurchaseOrderDto>> getSupplierOrders(
            @PathVariable Long id,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate start,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate end) {
        
        return ResponseEntity.ok(
            supplierService.getSupplierOrdersBetweenDates(id, start, end)
        );
    }

    @GetMapping("/by-product/{productId}")
    public ResponseEntity<List<SupplierResponse>> getSuppliersByProduct(
            @PathVariable Long productId) {
        
        return ResponseEntity.ok(supplierService.getSuppliersByProduct(productId));
    }
}
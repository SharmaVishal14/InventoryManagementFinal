package com.cts.inventorymanagement.order.service.impl;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.cts.inventorymanagement.order.client.ProductClient;
import com.cts.inventorymanagement.order.client.StockClient;
import com.cts.inventorymanagement.order.exceptions.InsufficientStockException;
import com.cts.inventorymanagement.order.exceptions.ProductNotFoundException;
import com.cts.inventorymanagement.order.model.Order;
import com.cts.inventorymanagement.order.model.OrderDto;
import com.cts.inventorymanagement.order.model.OrderItem;
import com.cts.inventorymanagement.order.model.OrderItemDto;
import com.cts.inventorymanagement.order.model.StockDto;
import com.cts.inventorymanagement.order.model.StockUpdateRequest;
import com.cts.inventorymanagement.order.model.StockUpdateRequest.Operation;
import com.cts.inventorymanagement.order.repository.OrderRepository;
import com.cts.inventorymanagement.order.service.OrderService;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class OrderServiceImpl implements OrderService {

	  private final OrderRepository orderRepo;
	    private final ProductClient productClient;
	    private final StockClient stockClient;

	    @Override
	    @Transactional
	    public OrderDto createOrder(OrderDto orderDto) {
	        // Validate products exist and check stock
	        for (OrderItemDto item : orderDto.getItems()) {
	            // Check product exists
	            try {
	                productClient.getProductById(item.getProductId());
	            } catch (Exception e) {
	                throw new ProductNotFoundException("Product not found with id: " + item.getProductId() + e.getMessage());
	            }

	            // Check stock availability
	            StockDto stock = stockClient.getStock(item.getProductId());
	            if (stock.getQuantity() < item.getQuantity()) {
	                throw new InsufficientStockException(
	                    "Insufficient stock for product: " + item.getProductId() + 
	                    ". Available: " + stock.getQuantity());
	            }
	        }

	        // Create the order
	        Order order = new Order();
	        BeanUtils.copyProperties(orderDto, order, "items");
	        
	        List<OrderItem> orderItems = orderDto.getItems().stream()
	            .map(itemDto -> {
	                OrderItem item = new OrderItem();
	                BeanUtils.copyProperties(itemDto, item);
	                item.setOrder(order);

	                StockUpdateRequest stockRequest = new StockUpdateRequest();
	                stockRequest.setQuantity(item.getQuantity());
	                stockRequest.setOperation(Operation.DECREMENT);
	                stockClient.updateStock(item.getProductId(), stockRequest);
	                
	                return item;
	            }).collect(Collectors.toList());
	        
	        order.setItems(orderItems);
	        order.setOrderStatus(Order.Status.PENDING);
	        order.setOrderdate(LocalDateTime.now());
	        
	        orderRepo.save(order);
	        return convertToDto(order);
	    }

    @Override
    public List<OrderDto> getAllOrders() {
        List<Order> orders = orderRepo.findAll();
        return orders.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    public List<OrderDto> getOrdersOfCustomer(Long customerId){
    	List<Order> orders = orderRepo.findByCustomerId(customerId);
    	 return orders.stream()
                 .map(this::convertToDto)
                 .collect(Collectors.toList());
    }

    @Override
    public List<OrderDto> getOrdersOfProduct(Long productId) {
        List<Order> orders = orderRepo.findByProductId(productId);
        return orders.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }


    @Override
    public Map<String, String> updateOrderStatus(Long orderId, Order.Status orderStatus) {
        Order order = orderRepo.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order does not exist!"));
        order.setOrderStatus(orderStatus);
        orderRepo.save(order);

        Map<String, String> response = new HashMap<>();
        response.put("status", orderStatus.toString());
        return response;
    }
    
    
    private OrderDto convertToDto(Order order) {
        OrderDto orderDto = new OrderDto();
        BeanUtils.copyProperties(order, orderDto, "items");
        
        if (order.getItems() != null) {
            List<OrderItemDto> itemDtos = order.getItems().stream()
                    .map(item -> {
                        OrderItemDto itemDto = new OrderItemDto();
                        BeanUtils.copyProperties(item, itemDto);
                        return itemDto;
                    }).collect(Collectors.toList());
            orderDto.setItems(itemDtos);
        }
        
        return orderDto;
    }
}